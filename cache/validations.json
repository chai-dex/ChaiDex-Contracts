{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "cbeaaa50e767a4c2f4c6c7847bcd4855fc976319c288e1fe81f1d90ae871f39d",
          "withoutMetadata": "84968139eb8dfd514895956f220bca0132fd15fce68287c708adde9eec7fab53",
          "linkedWithoutMetadata": "84968139eb8dfd514895956f220bca0132fd15fce68287c708adde9eec7fab53"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "27b878c826f94d1f8929171d058c48f3a9ef42c3e8e5d9f010e8b6c1af395cd7",
          "withoutMetadata": "3b843250de61e333c56aa6753308cde4451f99d7c0d947572ea9b88b02d747fc",
          "linkedWithoutMetadata": "3b843250de61e333c56aa6753308cde4451f99d7c0d947572ea9b88b02d747fc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "fa1ca40e545599e1a76801d741401e368468dd58e142a986bfa34ab15bef6e40",
          "withoutMetadata": "7989888cab3994aae116f1cd92595e9e7bf2a9cef710ec4bc789c54683ebaca1",
          "linkedWithoutMetadata": "7989888cab3994aae116f1cd92595e9e7bf2a9cef710ec4bc789c54683ebaca1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "2e254ed6bb886ba8c0b95376ac1bd1ef4b165df19094e28dff002ee4925322fc",
          "withoutMetadata": "e082ff4cb48b364b1667fd6c8ff46737aac5376c3dd2a8e5cc2455e5f7f7bb1f",
          "linkedWithoutMetadata": "e082ff4cb48b364b1667fd6c8ff46737aac5376c3dd2a8e5cc2455e5f7f7bb1f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "164f90c9fa0e5ebf9beffc6b16d7768f003be83dd4784a4d1b923b28335de124",
          "withoutMetadata": "1564ef92ceefa527e30d7482c0a9b5e240dac5194aae5fc89c62038d46415d73",
          "linkedWithoutMetadata": "1564ef92ceefa527e30d7482c0a9b5e240dac5194aae5fc89c62038d46415d73"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "be7b7612cae70059c5499b97319c797c47be3d2fa4e612af71fb43bb40881c0e",
          "withoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a",
          "linkedWithoutMetadata": "6e369e572c9ecd8dcd8f474e55a8ca92468ccfd3bd1f561a0db459a3da6e8b4a"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7374_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7361_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7342_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7374_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7361_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7342_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "3c493a6fcf4edcf2289d238e09f69ca1011a352bee2edc5fdc56e0bb40f107a1",
          "withoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70",
          "linkedWithoutMetadata": "e7c62442b6b64f4ce65d5e952a9ab98c27fb23fea8e1eb0e83ab3a651cba6b70"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "014b69ac91bfdb63e3dcdf313223a047a1cc1540f3be503605cad4a1a2c910a5",
          "withoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3",
          "linkedWithoutMetadata": "3b0cf89db23f5091f213a5e2df90bba60c2236aaad3da9a2ae722f81133610f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "8de61d015c0e77cf78d91bf0e23e418bbe787302821e217926a6855105e0f7a1",
          "withoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa",
          "linkedWithoutMetadata": "a60e7ae6ab3b3123831c56557ba2372a398355a18a0759cea634a86de91fc6fa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "ea8007a61f554dd394889cd50073eea5c176a09efda9ea8d8fa31c6650634305",
          "withoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c",
          "linkedWithoutMetadata": "6cd71fad113a29bf0fcdb67671a139593e5bc627916990c2a41995638755586c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "4ed343e21d4988adcc5837ddd141c9b599f6d257108375cf9e51f5241a318e6b",
          "withoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba",
          "linkedWithoutMetadata": "23ba92901a163a7b427d8a2a4b13ec4118736d6900f472f490d23dbd554c1fba"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "3e2f11c85f3aa53e1a3fdfee3bac611393a2f2c18d474941aa2c64f48b674f21",
          "withoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3",
          "linkedWithoutMetadata": "0c9aaf0bd95951f931a741421a441f12ef0ca787a653c1037fc8597792e586a3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "d923329e01116fca41bd148828adf92866d8660116e6afcadd3b90aaaaa6165b",
          "withoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1",
          "linkedWithoutMetadata": "aab789c2d7394a1126eba63a1bd06fb11a8b552aba5e33f1892628e5681599a1"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "ec81a2a726dc3d1182c27d3f1007f6847058da4fefe8e367e4b8721b34ee0cd5",
          "withoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b",
          "linkedWithoutMetadata": "e014ffa184b4c209d8584820d1e2eb5855a94efbe14e06b2884342369f7e5c5b"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "08ce55a9afac649c14efefed30b08f615d10b672c9de0f03d155421186a220df",
          "withoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858",
          "linkedWithoutMetadata": "449d2c150f2d53f5205f162a1a66d9b8bd4ea84b6bef4475ee546c066626c858"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "431a66a645f9cbdab6c9e533f26aa23c48b7d6c478dc7b9b3b42236f8d46a4d9",
          "withoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48",
          "linkedWithoutMetadata": "45c3ba4ae61ee2ae545296fe0d077ddb7ff277700844b6ddd8c903b9eed44a48"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13802_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13789_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13770_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13802_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13789_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13770_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "3f2b4e5d07b530317581fbbfa83542a028a2cee3173b5d59b7e21626dbc5d9f1",
          "withoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b",
          "linkedWithoutMetadata": "d0f6c71ed8dd66b1af07c65443909bc852530ac20c7b5e8bf363db3c9b02e17b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4761_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4748_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4731_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4761_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4748_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4731_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5872_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5859_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5842_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5872_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5859_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5842_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "bfb95db0d46016c16714cf5640df28f092f6584093cea701a6d6be924c5b1c29",
          "withoutMetadata": "dcffe060eb3fe5701ca1421e1600371958f55de716b29259d37504ab2d48f925",
          "linkedWithoutMetadata": "dcffe060eb3fe5701ca1421e1600371958f55de716b29259d37504ab2d48f925"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7325_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7344_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7357_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7357_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7344_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7325_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7357_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7344_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7325_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "2672c0e9a1403b2d7e0115374b1300d1b5e059a7f89187e97aca0eb2a313bee4",
          "withoutMetadata": "ad59ca782464b5cd393197a1d4f6c3120258ac2e424b29e1a174a04fe2057a93",
          "linkedWithoutMetadata": "ad59ca782464b5cd393197a1d4f6c3120258ac2e424b29e1a174a04fe2057a93"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "43cfa6a657c9c7b47bc253d7239a44ddd240e4f8835eb192495645fce8d8051b",
          "withoutMetadata": "e7a4ffb56275c153cba4dd15c597f1089cf0eed581de7b6b11d77fe1bb98145a",
          "linkedWithoutMetadata": "e7a4ffb56275c153cba4dd15c597f1089cf0eed581de7b6b11d77fe1bb98145a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "1ebae16be7384401ae9a14f0cae7a373e35076716cbafc9bf49ae27dab95f4fb",
          "withoutMetadata": "610aa344b7b9afa1194f7f35c3fdd261b119c7699463ff7eff98b2757fda3bfd",
          "linkedWithoutMetadata": "610aa344b7b9afa1194f7f35c3fdd261b119c7699463ff7eff98b2757fda3bfd"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "76d4e339cf8df7bbcb6832fefe187409dd79528b42894ba7efff3d71525dc5a6",
          "withoutMetadata": "d55584db879c30b801070efe5fdd6cb2d150259567b1aad08cd89a3ff869e7a2",
          "linkedWithoutMetadata": "d55584db879c30b801070efe5fdd6cb2d150259567b1aad08cd89a3ff869e7a2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "8e82e1a01236c8e3baac56abdfa94ded1b00c0b6b1c81ec36ac485920769db92",
          "withoutMetadata": "7700cbd79ec854f7e6bbb1672a61be328c304ff35466de74045e1edf75df229b",
          "linkedWithoutMetadata": "7700cbd79ec854f7e6bbb1672a61be328c304ff35466de74045e1edf75df229b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7389_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7376_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7359_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7389_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7376_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7359_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "4ab447b6384fea01eb3bea23f4d5297d8086f4199e5c1c87008c9b81b6570274",
          "withoutMetadata": "1ab4ff6e7906df0e550fdada9255b29a49d8d0f8b15a0c6031c906d07c628515",
          "linkedWithoutMetadata": "1ab4ff6e7906df0e550fdada9255b29a49d8d0f8b15a0c6031c906d07c628515"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10021_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10008_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9991_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10021_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10008_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9991_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "0fc62fb9ce4f09def3ad7c7c3fb890002cb856fb9595249ec09ee4f0458f488d",
          "withoutMetadata": "4a84deb236f408d9f4683ef2611ae79d15049bfb9e80d4d485408b24c2b8a051",
          "linkedWithoutMetadata": "4a84deb236f408d9f4683ef2611ae79d15049bfb9e80d4d485408b24c2b8a051"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "e90a3ba57052bd13c2c39cdd5f1d4bf738e8d4170e00b8e40f248efe6577ac61",
          "withoutMetadata": "e8b543eb10b51d1efb9831a16ba30691414c697a74907615efd591fabcd80719",
          "linkedWithoutMetadata": "e8b543eb10b51d1efb9831a16ba30691414c697a74907615efd591fabcd80719"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "910c9d09854cf9d5fe30f906084b5bad4a82112b0cbffc50a52a8af67ec7bf2f",
          "withoutMetadata": "71acb8c5926451972367b54cdb8c544bfdc3fd8fc21a0ccb58aecfcea15ecb92",
          "linkedWithoutMetadata": "71acb8c5926451972367b54cdb8c544bfdc3fd8fc21a0ccb58aecfcea15ecb92"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "49e627bed236cc51dbf95a4b33b00a2e5bfb6c3baf2707ce1dc7b912c3de47c4",
          "withoutMetadata": "55ea3cbbfbf4cfed565d11e96689ce4a9166832b4b9ecdd33c79d70e64dc64a8",
          "linkedWithoutMetadata": "55ea3cbbfbf4cfed565d11e96689ce4a9166832b4b9ecdd33c79d70e64dc64a8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13745_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13764_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13777_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13777_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13764_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13745_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13777_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13764_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13745_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "1c5b333dfeaad4470b75deca77b9dc18d0375292192de268aed9fee56d24a018",
          "withoutMetadata": "9907630051c66330631c1d0c4dba4d810d7b7e60f90bb22b826dab85b244e4e3",
          "linkedWithoutMetadata": "9907630051c66330631c1d0c4dba4d810d7b7e60f90bb22b826dab85b244e4e3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "878b48c93289d73d6531afd088cbd6a308cdd2b11a372c1419c9a86ed0151396",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)2347_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)2364_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)2377_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)2377_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)2364_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)2347_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)2377_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)2364_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)2347_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "a37c1dd3d1f0bd66a72f8d05cb7a906286eaa53a20e23bd786c5dd4e6eea4cf6",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)3458_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)3475_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)3488_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)3488_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)3475_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)3458_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)3488_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)3475_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)3458_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "a23589d4f5b7803c17955ecbb5a6dbe544649339ad4408c0f0755bb64900eadd",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4404_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4423_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4436_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4436_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4423_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4404_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4436_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4423_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4404_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "d284793315a0089f8d66ebe9cb91d9fcfd989379fe2378cb87518168a68eda91",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "5d09eca10bb6bc6eaf54696a9fb31d71dd9230e11df3b5b4f7f2b1e9117ef5c2",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "7f609494cbcbd5d4835a2ec8956edc1445c74ab1cf48ed02e9464fde84a251b5",
          "withoutMetadata": "094410b1168f5ff64a0d11938f6c816db4e0a94b7fecde95a0832af39829c674",
          "linkedWithoutMetadata": "094410b1168f5ff64a0d11938f6c816db4e0a94b7fecde95a0832af39829c674"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "aef6b98a050d7c15b04a67242c915ef323bb88cffe29f80dfce730432fd73605",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "INRCoin",
            "src": "contracts/INRC.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:7",
        "version": {
          "withMetadata": "665e528fa8be52fd0c69dacc3d4e41bff9b2e0507384d42ecbe59bff3e1a698c",
          "withoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e",
          "linkedWithoutMetadata": "3119939aa53159b253d6a8b3e124fbe66c90254123380663fc57d04fcb44290e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:35"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:42"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:51"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:66"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:71"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:9",
        "version": {
          "withMetadata": "2865bc658318a466a3490f31e590a8c05b3fc8603682fda0327ed6d8d5101b8c",
          "withoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d",
          "linkedWithoutMetadata": "20ab3cf7e9f2217e499099b698eda4b9e4c08e127fcef096e063a27fe063102d"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPool",
            "src": "contracts/LiquidityPool.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:50"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:57"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:58"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:66"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:67"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:81"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:86"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:87"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:9",
        "version": {
          "withMetadata": "1d0cee4f95bbe7fb8bbea728e85d864ad8b3cc283c6a2dd5c4a907f43ae10a16",
          "withoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1",
          "linkedWithoutMetadata": "fc04d845c89968c044801bdc44e53e29bbe0d322f39c4481d46215e1a07d7ab1"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EscrowINRC",
            "src": "contracts/P2PINRC.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)4728_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)4745_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)4758_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:80"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)4758_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)4745_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)4728_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)4758_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)4745_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)4728_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "b11b5d298be5a0e1bd888819c46419dd62a9939e70838cd0fe877127e9b7e72a",
          "withoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95",
          "linkedWithoutMetadata": "92bdb054bf7f9401cbbc69e11e25ceba61f604eb58f6f21d3b03cca1aa00da95"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EscrowNative",
            "src": "contracts/P2Pnative.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5838_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5855_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5868_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5868_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5855_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5838_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5868_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5855_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5838_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:8",
        "version": {
          "withMetadata": "2ef1a71990c7ecdb6b39883b719e38468d523955461067e4b5960f9a0ec82dd0",
          "withoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664",
          "linkedWithoutMetadata": "bcb1d02fccee67b9b44fa3343c7e39378be98b958f32208df28dd01af792c664"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:15"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:20"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:24"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "bfb95db0d46016c16714cf5640df28f092f6584093cea701a6d6be924c5b1c29",
          "withoutMetadata": "dcffe060eb3fe5701ca1421e1600371958f55de716b29259d37504ab2d48f925",
          "linkedWithoutMetadata": "dcffe060eb3fe5701ca1421e1600371958f55de716b29259d37504ab2d48f925"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:9",
        "version": {
          "withMetadata": "1cdfc2185f1b16680e60e06be94bb4304d50ed08c1f78fd591304bf98568407a",
          "withoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7",
          "linkedWithoutMetadata": "2e8295a4f13b55185a2e52de2c30d32315a025e06c2cd5a7bc499059b2c027e7"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EscrowERC",
            "src": "contracts/p2pERC.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7320_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:72"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7339_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:73"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7352_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7352_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7339_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7320_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7352_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7339_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7320_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:9",
        "version": {
          "withMetadata": "4980077a5a4f984cb75541cdbcfdeab00e970136820ef24832511aa6aea32e07",
          "withoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc",
          "linkedWithoutMetadata": "6d0e7e1d3c72b5db311319048d8942804be8e72baadcfde72c40805cec24b9bc"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPool",
            "src": "contracts/treasuryPool.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:28"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:30"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:32"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:37"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:15",
        "version": {
          "withMetadata": "2672c0e9a1403b2d7e0115374b1300d1b5e059a7f89187e97aca0eb2a313bee4",
          "withoutMetadata": "ad59ca782464b5cd393197a1d4f6c3120258ac2e424b29e1a174a04fe2057a93",
          "linkedWithoutMetadata": "ad59ca782464b5cd393197a1d4f6c3120258ac2e424b29e1a174a04fe2057a93"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:15",
        "version": {
          "withMetadata": "1376309ba02f7bec2b3d5dbe372a4b2b89450631d875b1e07d3839493a0f05a2",
          "withoutMetadata": "e7a4ffb56275c153cba4dd15c597f1089cf0eed581de7b6b11d77fe1bb98145a",
          "linkedWithoutMetadata": "e7a4ffb56275c153cba4dd15c597f1089cf0eed581de7b6b11d77fe1bb98145a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "INRCoin",
            "src": "contracts/INRC.sol:80"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:62"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:63"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:11",
        "version": {
          "withMetadata": "1ebae16be7384401ae9a14f0cae7a373e35076716cbafc9bf49ae27dab95f4fb",
          "withoutMetadata": "610aa344b7b9afa1194f7f35c3fdd261b119c7699463ff7eff98b2757fda3bfd",
          "linkedWithoutMetadata": "610aa344b7b9afa1194f7f35c3fdd261b119c7699463ff7eff98b2757fda3bfd"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPoolTron",
            "src": "contracts/LPfortron.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:101"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:102"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:110"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:111"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:112"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:113"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:114"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:125"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:130"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:131"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:132"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:13",
        "version": {
          "withMetadata": "1cf6e97ac70b426c1f3f3a239bd3d5236a5316756068eeec0daf687fcadab2c3",
          "withoutMetadata": "d55584db879c30b801070efe5fdd6cb2d150259567b1aad08cd89a3ff869e7a2",
          "linkedWithoutMetadata": "d55584db879c30b801070efe5fdd6cb2d150259567b1aad08cd89a3ff869e7a2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityPool",
            "src": "contracts/LiquidityPool.sol:88"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:127"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:134"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:135"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:143"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:144"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:145"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:146"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:147"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:158"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:163"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:164"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:165"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:13",
        "version": {
          "withMetadata": "0a6f5e8805c1b7d939196d5f2a75d9125027a432389f1fc67abbc07a8d234b49",
          "withoutMetadata": "7700cbd79ec854f7e6bbb1672a61be328c304ff35466de74045e1edf75df229b",
          "linkedWithoutMetadata": "7700cbd79ec854f7e6bbb1672a61be328c304ff35466de74045e1edf75df229b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EscrowINRC",
            "src": "contracts/P2PINRC.sol:109"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)7356_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:165"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)7373_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:166"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)7386_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:167"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:168"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:169"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:172"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:173"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:174"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:175"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:176"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:177"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:178"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:179"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)7386_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)7373_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)7356_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)7386_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)7373_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)7356_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:12",
        "version": {
          "withMetadata": "e9fd4fbbbf05f94cbf1f46d25be39fd2f7eb4d6c6adf4b8fb6eec7a2a262a88b",
          "withoutMetadata": "1ab4ff6e7906df0e550fdada9255b29a49d8d0f8b15a0c6031c906d07c628515",
          "linkedWithoutMetadata": "1ab4ff6e7906df0e550fdada9255b29a49d8d0f8b15a0c6031c906d07c628515"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EscrowNative",
            "src": "contracts/P2Pnative.sol:96"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)9987_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:152"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)10004_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:153"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)10017_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:154"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:157"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:158"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:159"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:160"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:161"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:162"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)10017_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)10004_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)9987_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)10017_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)10004_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)9987_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:12",
        "version": {
          "withMetadata": "0fc62fb9ce4f09def3ad7c7c3fb890002cb856fb9595249ec09ee4f0458f488d",
          "withoutMetadata": "4a84deb236f408d9f4683ef2611ae79d15049bfb9e80d4d485408b24c2b8a051",
          "linkedWithoutMetadata": "4a84deb236f408d9f4683ef2611ae79d15049bfb9e80d4d485408b24c2b8a051"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPoolTron",
            "src": "contracts/TPfortron.sol:74"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:80"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:82"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:84"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:85"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:86"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:89"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:11",
        "version": {
          "withMetadata": "e90a3ba57052bd13c2c39cdd5f1d4bf738e8d4170e00b8e40f248efe6577ac61",
          "withoutMetadata": "e8b543eb10b51d1efb9831a16ba30691414c697a74907615efd591fabcd80719",
          "linkedWithoutMetadata": "e8b543eb10b51d1efb9831a16ba30691414c697a74907615efd591fabcd80719"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "910c9d09854cf9d5fe30f906084b5bad4a82112b0cbffc50a52a8af67ec7bf2f",
          "withoutMetadata": "71acb8c5926451972367b54cdb8c544bfdc3fd8fc21a0ccb58aecfcea15ecb92",
          "linkedWithoutMetadata": "71acb8c5926451972367b54cdb8c544bfdc3fd8fc21a0ccb58aecfcea15ecb92"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:17"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:18"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:19"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:20"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:13",
        "version": {
          "withMetadata": "6ca1084ded824b591e3f7335c273f445d9fd5d002df3e7d339aea71aaf83c6d9",
          "withoutMetadata": "55ea3cbbfbf4cfed565d11e96689ce4a9166832b4b9ecdd33c79d70e64dc64a8",
          "linkedWithoutMetadata": "55ea3cbbfbf4cfed565d11e96689ce4a9166832b4b9ecdd33c79d70e64dc64a8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EscrowERC",
            "src": "contracts/p2pERC.sol:105"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)13740_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:161"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)13759_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:162"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)13772_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:163"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:164"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:165"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:166"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:167"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:168"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:169"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:170"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:171"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)13772_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)13759_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)13740_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)13772_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)13759_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)13740_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:13",
        "version": {
          "withMetadata": "e2d503cff4567dc5855d684eef416eb91301af6e4d9c4290da14b6d0da9ae8d1",
          "withoutMetadata": "9907630051c66330631c1d0c4dba4d810d7b7e60f90bb22b826dab85b244e4e3",
          "linkedWithoutMetadata": "9907630051c66330631c1d0c4dba4d810d7b7e60f90bb22b826dab85b244e4e3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TreasuryPool",
            "src": "contracts/treasuryPool.sol:96"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:111"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:113"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:115"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:116"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:117"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:120"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}