{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "efc0d4f26f4282e1417e57511377524c2ebed76f4adf74089fd5467b6c815791",
          "withoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2",
          "linkedWithoutMetadata": "4c2ff4e979962b32a7bd688daa0971fd7ec081645f41d963141bdccce83622d2"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:15",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "ceaf5cbdf3e15cbdf49ad46586be83a314e1bc2bb0dc77d9a049485c01c16754",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "3ae7177c99a18e590a72938259aaf7f2031efe7510efc3f1dfd025bade0cb2f0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e585192e385b39d310d6df3cb5a885d2c8c6e3f140051bb40330fcd6e9dafd02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "d691e8a7a1eafce9118c516ff82f6831a35f01bb542afd43133dc0f122c12514",
          "withoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0",
          "linkedWithoutMetadata": "b4540fe9f7e31edaff0d12456d61a9a0f7cf1d32e18e2cd7387df7f6481f4dc0"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "18b582dab7ce4df941b9c2731aaafe8ef0dc991f41045a180377ca31cd283b0b",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "265ddbacdeb109cd7b51044250c6c989b791d313cb7e765ad12042d2c7f06d23",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Chait.sol:Chai": {
        "src": "contracts/Chait.sol:11",
        "version": {
          "withMetadata": "05f427e6ad76df629c340dbcd45d2799b019aac0e08199f3100d8716b1377752",
          "withoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6",
          "linkedWithoutMetadata": "0b86efcf226548b661c3bf04cbbf2bc13da8d1b874474a6f6302c33a6c5848e6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC20BurnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/INRC.sol:INRCoin": {
        "src": "contracts/INRC.sol:11",
        "version": {
          "withMetadata": "e12205f3bba0d5ed812ad82043257f91e50b7fadca7ce91a6353e5c212cc4e0b",
          "withoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8",
          "linkedWithoutMetadata": "b48028fa03e860c23cd4948f16476b44a2c9d9a4fed762ff91ecf8959b7f65e8"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setBurnwhitelist(uint256,address)",
          "setEpoch(bool)",
          "decimals()",
          "issue(address,uint256)",
          "redeem(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "101",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "201",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "BurnWhitelist",
              "offset": 0,
              "slot": "301",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:14"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "302",
              "type": "t_bool",
              "contract": "INRCoin",
              "src": "contracts/INRC.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LPfortron.sol:LiquidityPoolTron": {
        "src": "contracts/LPfortron.sol:8",
        "version": {
          "withMetadata": "7af003ac72661c3f7337d1666ef70ac3b369f2d887048771ea9a2888f1af9ab0",
          "withoutMetadata": "1208d355399d796d6ced67ad7cda5afa59ffb2909391616284587bbd783f5ecb",
          "linkedWithoutMetadata": "1208d355399d796d6ced67ad7cda5afa59ffb2909391616284587bbd783f5ecb"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "unpause()",
          "pause()",
          "()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:36"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:43"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:44"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:52"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:53"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:54"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:55"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:56"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:67"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:72"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:73"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "11",
              "type": "t_bool",
              "contract": "LiquidityPoolTron",
              "src": "contracts/LPfortron.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/LiquidityPool.sol:LiquidityPool": {
        "src": "contracts/LiquidityPool.sol:10",
        "version": {
          "withMetadata": "12611e0c0dc31f7041a21e50ec2954c2f635db61e8513aae026943fba56aebeb",
          "withoutMetadata": "c1b47475de44ff60d2eda693a22adc10d2e58935261b6c58da0cfd416446eb30",
          "linkedWithoutMetadata": "c1b47475de44ff60d2eda693a22adc10d2e58935261b6c58da0cfd416446eb30"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setEpoch(bool)",
          "setUnstake(bool)",
          "setUSDAddress(uint8,string,address)",
          "stake(uint8,uint256)",
          "unstake(uint8,uint256)",
          "unstakeAll(uint8)",
          "getLPbalance(uint8)",
          "GetStakers(uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "stakers",
              "offset": 0,
              "slot": "251",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:52"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:59"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:60"
            },
            {
              "label": "liquidityPool",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:68"
            },
            {
              "label": "LPbalanceUSD",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:69"
            },
            {
              "label": "StakerLiquidity",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:70"
            },
            {
              "label": "unstakedMax",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_bool))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:71"
            },
            {
              "label": "OldStaker",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:72"
            },
            {
              "label": "liquidityPoolStakes",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:83"
            },
            {
              "label": "totalLiquidity",
              "offset": 0,
              "slot": "260",
              "type": "t_uint256",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:88"
            },
            {
              "label": "epochover",
              "offset": 0,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:89"
            },
            {
              "label": "unstakable",
              "offset": 1,
              "slot": "261",
              "type": "t_bool",
              "contract": "LiquidityPool",
              "src": "contracts/LiquidityPool.sol:90"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_bool))": {
              "label": "mapping(address => mapping(uint8 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
              "label": "mapping(address => mapping(uint8 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_bool)": {
              "label": "mapping(uint8 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2PINRC.sol:EscrowINRC": {
        "src": "contracts/P2PINRC.sol:10",
        "version": {
          "withMetadata": "ee13374505d6323fcb4814a82dad2dcf1f32af907c83be68acec390619722b8a",
          "withoutMetadata": "b7799aaab6993742e06f8810f3bd40e7c743012e1de550ab254d6e9c7af9a436",
          "linkedWithoutMetadata": "b7799aaab6993742e06f8810f3bd40e7c743012e1de550ab254d6e9c7af9a436"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setINRCAddress(address,address)",
          "PayFeeCHT(uint256,uint256)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)5676_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:74"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)5693_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:75"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)5706_storage)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:76"
            },
            {
              "label": "INRC",
              "offset": 0,
              "slot": "254",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:77"
            },
            {
              "label": "Feetoken",
              "offset": 0,
              "slot": "255",
              "type": "t_address",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:78"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:81"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:82"
            },
            {
              "label": "FeePaidCHT",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:83"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:84"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:85"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:86"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "262",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:87"
            },
            {
              "label": "CHTBalance",
              "offset": 0,
              "slot": "263",
              "type": "t_uint256",
              "contract": "EscrowINRC",
              "src": "contracts/P2PINRC.sol:88"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)5706_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)5693_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)5676_storage)": {
              "label": "mapping(uint256 => struct EscrowINRC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)5706_storage": {
              "label": "struct EscrowINRC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)5693_storage": {
              "label": "struct EscrowINRC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)5676_storage": {
              "label": "struct EscrowINRC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/P2Pnative.sol:EscrowNative": {
        "src": "contracts/P2Pnative.sol:8",
        "version": {
          "withMetadata": "d0346ad6770930b748d54566123b4aa490c9e9e5983bf312a0c542c993e1fee8",
          "withoutMetadata": "094d1177cc81013733e9e3c2c637a676606be94809cdaea4bdb7c3ee0d47f3de",
          "linkedWithoutMetadata": "094d1177cc81013733e9e3c2c637a676606be94809cdaea4bdb7c3ee0d47f3de"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint256)",
          "depositSeller(address,uint256,uint256,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)6801_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:71"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)6818_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:72"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)6831_storage)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:73"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:76"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:77"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:78"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:79"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:80"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "259",
              "type": "t_uint256",
              "contract": "EscrowNative",
              "src": "contracts/P2Pnative.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)6831_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)6818_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)6801_storage)": {
              "label": "mapping(uint256 => struct EscrowNative.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)6831_storage": {
              "label": "struct EscrowNative.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)6818_storage": {
              "label": "struct EscrowNative.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)6801_storage": {
              "label": "struct EscrowNative.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/TPfortron.sol:TreasuryPoolTron": {
        "src": "contracts/TPfortron.sol:9",
        "version": {
          "withMetadata": "ca57fe4024d12b21b13929032a475eec0b91c3ce73951253c150ae6f0ecf4eb1",
          "withoutMetadata": "7295cef53c7568e9a405a8f070e89d99416377dd65645f1488b6e6f1e6b268a7",
          "linkedWithoutMetadata": "7295cef53c7568e9a405a8f070e89d99416377dd65645f1488b6e6f1e6b268a7"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:17"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:19"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:21"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "3",
              "type": "t_bool",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:22"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:23"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:26"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TreasuryPoolTron",
              "src": "contracts/TPfortron.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Test_usd.sol:TESTUSD": {
        "src": "contracts/Test_usd.sol:7",
        "version": {
          "withMetadata": "ba5690f0a2b4cf68ec6aa54686e6469039643a473822a74370454469e8ede1ac",
          "withoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521",
          "linkedWithoutMetadata": "2e2af00607dd5db32e3b9478daa2a17345ec391adcabbafa2f9ef29604f4e521"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TESTUSD",
            "src": "contracts/Test_usd.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/apy.sol:Apy": {
        "src": "contracts/apy.sol:8",
        "version": {
          "withMetadata": "14a1488ebea573472f17a0d88f6ce5da3bed61f86284cddb9acb6a7c5853805f",
          "withoutMetadata": "73ca0523e59a754463061c56f181b65bda323ae6a47f7a8a1f443e2e4801a7d7",
          "linkedWithoutMetadata": "73ca0523e59a754463061c56f181b65bda323ae6a47f7a8a1f443e2e4801a7d7"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setAddress(address)",
          "fees(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Apy",
            "src": "contracts/apy.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "CHT",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:9"
            },
            {
              "label": "MP",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:10"
            },
            {
              "label": "RP",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Apy",
              "src": "contracts/apy.sol:11"
            },
            {
              "label": "amount1",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:12"
            },
            {
              "label": "amount2",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Apy",
              "src": "contracts/apy.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/p2pERC.sol:EscrowERC": {
        "src": "contracts/p2pERC.sol:10",
        "version": {
          "withMetadata": "5363845ac3b876a871ad6c0206c8d00090fbb1fa5c6a6dce6d14f9df140da270",
          "withoutMetadata": "b84c1a72519782804591eea306bce47c7453553080992c55d633cc8d104820e5",
          "linkedWithoutMetadata": "b84c1a72519782804591eea306bce47c7453553080992c55d633cc8d104820e5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize()",
          "()",
          "pause()",
          "unpause()",
          "setERCAddress(uint8,string,address)",
          "setSwapID(uint256,uint256,address,uint256,uint256)",
          "setTradeCloneID(uint256,address,uint256,uint256,uint8,uint256)",
          "depositSeller(address,uint256,uint256,uint8,uint256)",
          "depositBuyer(uint256,uint256)",
          "withDrawBuyer(uint256)",
          "refundSeller(uint256)",
          "withdrawFee(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "151",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "201",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "TradeTrack",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint256,t_struct(TradeDetails)8351_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:74"
            },
            {
              "label": "TradeCloneTrack",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint256,t_struct(TradeClone)8370_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:75"
            },
            {
              "label": "SwapTrack",
              "offset": 0,
              "slot": "253",
              "type": "t_mapping(t_uint256,t_struct(SwapDetails)8383_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:76"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:77"
            },
            {
              "label": "Whitelistedtokens",
              "offset": 0,
              "slot": "255",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:78"
            },
            {
              "label": "TradeExisting",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:79"
            },
            {
              "label": "SwapInProgress",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:80"
            },
            {
              "label": "SwapExisting",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:81"
            },
            {
              "label": "TradeUpdating",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:82"
            },
            {
              "label": "TradeCloneUpdating",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:83"
            },
            {
              "label": "feeCollected",
              "offset": 0,
              "slot": "261",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "EscrowERC",
              "src": "contracts/p2pERC.sol:84"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
              "label": "mapping(address => mapping(uint256 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(SwapDetails)8383_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.SwapDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeClone)8370_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeClone)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TradeDetails)8351_storage)": {
              "label": "mapping(uint256 => struct EscrowERC.TradeDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(SwapDetails)8383_storage": {
              "label": "struct EscrowERC.SwapDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "parentTradeID",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "WithdrawAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "CompletionStatus",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(TradeClone)8370_storage": {
              "label": "struct EscrowERC.TradeClone",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGetTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "MaxBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "currentBalance",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                },
                {
                  "label": "feeAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(TradeDetails)8351_storage": {
              "label": "struct EscrowERC.TradeDetails",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "SellerGiveTokenIndex",
                  "type": "t_uint8",
                  "offset": 20,
                  "slot": "1"
                },
                {
                  "label": "endtime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "DepositValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "AvailableValue",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "originchainID",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "secondaryChainID",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/treasuryPool.sol:TreasuryPool": {
        "src": "contracts/treasuryPool.sol:10",
        "version": {
          "withMetadata": "80ebb807002924ed5e4b28ce2cbb1b60604075c4e6f8f1cba2e98ce471679d75",
          "withoutMetadata": "aa8daa59096fcb6a9e71927825c7d8661f45d4c43a4d4a5827a7fec4ff880692",
          "linkedWithoutMetadata": "aa8daa59096fcb6a9e71927825c7d8661f45d4c43a4d4a5827a7fec4ff880692"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize()",
          "()",
          "setMinter(bool)",
          "setDisable(bool)",
          "pause()",
          "unpause()",
          "setUSDAddress(uint8,string,address)",
          "Buy(uint8,uint256,uint256)",
          "BuyNat(uint256)",
          "Redeem(address,uint8,uint256)",
          "RedeemNat(address,uint256)",
          "getTPbalance(uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "201",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "USDStable",
              "offset": 0,
              "slot": "251",
              "type": "t_mapping(t_uint8,t_address)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:29"
            },
            {
              "label": "names",
              "offset": 0,
              "slot": "252",
              "type": "t_mapping(t_uint8,t_string_storage)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:31"
            },
            {
              "label": "Maxminted",
              "offset": 0,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:33"
            },
            {
              "label": "BuynatDisable",
              "offset": 1,
              "slot": "253",
              "type": "t_bool",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:34"
            },
            {
              "label": "TPbalanceUSD",
              "offset": 0,
              "slot": "254",
              "type": "t_mapping(t_uint8,t_uint256)",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:35"
            },
            {
              "label": "tPtotalBalance",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:38"
            },
            {
              "label": "tPtotalBalanceNative",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "TreasuryPool",
              "src": "contracts/treasuryPool.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint8,t_address)": {
              "label": "mapping(uint8 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_string_storage)": {
              "label": "mapping(uint8 => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint8,t_uint256)": {
              "label": "mapping(uint8 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}